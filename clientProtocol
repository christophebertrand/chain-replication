type message{ID, content, retAddr}
type peer{active, address}
Vars: done
  - ToDeliver: Set[message]
  - delivered:  Map[peer]Set[message]
  - Peers: []peer
  - activePeers: int

Event <'RaftDeliver', msg> done
  if msg not in delivered:
    toDeliver += msg
    resp := responsible(msg, activePeers)
    if resp == self:
      commitToPeers(msg)
      sendToClient(msg)

Event <'delivered', msg, from> done
  activePeers += from
  toDeliver -= msg
  delivered += msg

#timeouts comme from raft
Event <'timeout', p: peer>
  activePeers -= 1
  for msg := range toDeliver:
    if self == responsible(msg, activePeers):
      sendToClient(msg)

Event <GET, key > :
  value, ts := store.Lookup(key)
  broadcastValue(key, value, ts)

Periodically send heartbeat or piggyback on raft.


def sendToClient(msg): done //TODO exponential backoff
  httpSend('ok', msg.retAddr) #possible failure here
  delivered += msg
  toDeliver -= msg
  broadcast('delivered', msg)

def responsible(msg, activePeers): done
  r := msg.ID % activePeers
  return r'th active peer in Peers

def crashRecovery:
    read ToDeliver, delivered from
#  ToDeliver, delivered = askPeer for their state
